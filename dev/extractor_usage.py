# Run BinExtractor.extractSampleHeader to get Volume Sample and instrument settings for each run
input_path = '/Users/nils/Data/EXPORTS/IFCB107/raw/'
output_path = '/Users/nils/Data/MachineLearning/EXPORTS_sci/'
# bin_name = 'D20151119T072930_IFCB107'
ifcb = BinExtractor(input_path, output_path)
hdr = pd.DataFrame()
list_bin = [b[0:-4] for b in os.listdir(ifcb.path_to_bin) if b[-4:] == '.roi']
for b in tqdm(list_bin):
    hdr = hdr.append(pd.concat([pd.DataFrame([b], columns=['SampleId']), ifcb.extractSampleHeader(b)], axis=1))
hdr.to_csv(os.path.join(ifcb.path_to_output, 'EXPORTS_SamplesHeader.csv'), index=False, na_rep='NaN', float_format='%.2f')

# Run BinExtractor to build scientific dataset NAAMES
path_to_bin = '/Users/nils/Data/NAAMES/IFCB/Raw'
path_to_env_csv = '/Users/nils/Data/NAAMES/IFCB/Metadata/NAAMES_metadata_20191111.csv'
path_to_taxonomic_grouping_csv = '/Users/nils/Data/NAAMES/IFCB/Metadata/taxonomic_grouping_v5.csv'
path_to_ecotaxa_dir = '/Users/nils/Data/NAAMES/IFCB/EcoTaxaExports/EcoTaxa_20191108_183345'
output_path = '/Users/nils/Data/NAAMES/IFCB/Products'
# matlab_engine = matlab.engine.start_matlab()
# matlab_engine.parpool()
ifcb = BinExtractor(path_to_bin, output_path, path_to_env_csv, path_to_ecotaxa_dir, path_to_taxonomic_grouping_csv,
                    matlab_parallel_flag=True) # , matlab_engine=matlab_engine)
ifcb.run_science()

# Run BinExtractor to build scientific dataset EXPORTS
path_to_bin = '/Users/nils/Data/EXPORTS/IFCB107/raw'
path_to_env_csv = '/Users/nils/Data/EXPORTS/IFCB107/EXPORTS_metadata_20191113.csv'
path_to_taxonomic_grouping_csv = '/Users/nils/Data/NAAMES/IFCB/Metadata/taxonomic_grouping_v5.csv'
path_to_ecotaxa_dir = '/Users/nils/Data/EXPORTS/IFCB107/ecotaxa/EcoTaxa_20191115_091240'
output_path = '/Users/nils/Data/EXPORTS/IFCB107/SCI_20191115'
# bin_list_to_reprocess = ['D20180816T161819_IFCB107', 'D20180822T215513_IFCB107', 'D20180825T041958_IFCB107', 'D20180825T044222_IFCB107', 'D20180825T050445_IFCB107', 'D20180907T091008_IFCB107', 'D20180907T093232_IFCB107', 'D20180907T095456_IFCB107', 'D20180907T101719_IFCB107', 'D20180907T103943_IFCB107', 'D20180907T110207_IFCB107', 'D20180907T112430_IFCB107', 'D20180907T114654_IFCB107', 'D20180907T120918_IFCB107', 'D20180907T123141_IFCB107', 'D20180907T125405_IFCB107', 'D20180907T131629_IFCB107', 'D20180907T133853_IFCB107', 'D20180907T140116_IFCB107', 'D20180907T142340_IFCB107', 'D20180907T144604_IFCB107', 'D20180907T150827_IFCB107', 'D20180907T194131_IFCB107', 'D20180907T200354_IFCB107', 'D20180907T202618_IFCB107', 'D20180907T204842_IFCB107', 'D20180907T211105_IFCB107', 'D20180907T232243_IFCB107', 'D20180907T234507_IFCB107', 'D20180908T000731_IFCB107', 'D20180908T051444_IFCB107', 'D20180908T053707_IFCB107', 'D20180908T055931_IFCB107', 'D20180908T062155_IFCB107', 'D20180908T064418_IFCB107', 'D20180908T070642_IFCB107', 'D20180908T072905_IFCB107', 'D20180908T075129_IFCB107', 'D20180908T081352_IFCB107', 'D20180908T083616_IFCB107', 'D20180908T085840_IFCB107', 'D20180908T092103_IFCB107', 'D20180908T094327_IFCB107', 'D20180908T100550_IFCB107', 'D20180908T102814_IFCB107', 'D20180908T105038_IFCB107', 'D20180908T111301_IFCB107', 'D20180908T113525_IFCB107', 'D20180908T115748_IFCB107', 'D20180908T122012_IFCB107', 'D20180908T124235_IFCB107', 'D20180908T130459_IFCB107', 'D20180908T132723_IFCB107', 'D20180908T134946_IFCB107', 'D20180908T141210_IFCB107', 'D20180908T143433_IFCB107', 'D20180908T145657_IFCB107', 'D20180908T151920_IFCB107', 'D20180908T154144_IFCB107', 'D20180908T160408_IFCB107', 'D20180908T162631_IFCB107', 'D20180908T164855_IFCB107', 'D20180908T171118_IFCB107', 'D20180908T173342_IFCB107', 'D20180908T175605_IFCB107', 'D20180908T181829_IFCB107', 'D20180908T184053_IFCB107', 'D20180908T190316_IFCB107', 'D20180908T192540_IFCB107', 'D20180908T194803_IFCB107', 'D20180908T201027_IFCB107', 'D20180908T203251_IFCB107', 'D20180908T205514_IFCB107', 'D20180908T211738_IFCB107', 'D20180908T214001_IFCB107', 'D20180908T220225_IFCB107', 'D20180908T222448_IFCB107', 'D20180908T224712_IFCB107', 'D20180908T230935_IFCB107', 'D20180908T233159_IFCB107', 'D20180909T002302_IFCB107', 'D20180909T004526_IFCB107', 'D20180909T010750_IFCB107', 'D20180909T013013_IFCB107', 'D20180909T015237_IFCB107', 'D20180909T021500_IFCB107', 'D20180909T023724_IFCB107', 'D20180909T025947_IFCB107', 'D20180909T032211_IFCB107', 'D20180909T034435_IFCB107', 'D20180909T040658_IFCB107', 'D20180909T042922_IFCB107', 'D20180909T045145_IFCB107', 'D20180909T051409_IFCB107', 'D20180909T053633_IFCB107', 'D20180909T061143_IFCB107', 'D20180909T063407_IFCB107', 'D20180909T065630_IFCB107', 'D20180909T071854_IFCB107', 'D20180909T074118_IFCB107', 'D20180909T080341_IFCB107', 'D20180909T082605_IFCB107', 'D20180909T084828_IFCB107', 'D20180909T091052_IFCB107', 'D20180909T093316_IFCB107', 'D20180909T095539_IFCB107', 'D20180909T101803_IFCB107', 'D20180909T104027_IFCB107', 'D20180909T110250_IFCB107', 'D20180909T112514_IFCB107', 'D20180909T114738_IFCB107', 'D20180909T121002_IFCB107', 'D20180909T123225_IFCB107', 'D20180909T125449_IFCB107', 'D20180909T131713_IFCB107', 'D20180909T133937_IFCB107', 'D20180909T140200_IFCB107', 'D20180909T142424_IFCB107', 'D20180909T144648_IFCB107', 'D20180909T150911_IFCB107', 'D20180909T153135_IFCB107', 'D20180909T155359_IFCB107', 'D20180909T161622_IFCB107', 'D20180909T163846_IFCB107', 'D20180909T170109_IFCB107', 'D20180909T172333_IFCB107', 'D20180909T174557_IFCB107', 'D20180909T180820_IFCB107', 'D20180909T183044_IFCB107', 'D20180909T185308_IFCB107', 'D20180909T191531_IFCB107', 'D20180909T193755_IFCB107', 'D20180909T200019_IFCB107', 'D20180909T202242_IFCB107', 'D20180909T204506_IFCB107', 'D20180909T210729_IFCB107', 'D20180909T212953_IFCB107', 'D20180909T215217_IFCB107', 'D20180909T221440_IFCB107', 'D20180909T223704_IFCB107', 'D20180909T225928_IFCB107', 'D20180909T232151_IFCB107', 'D20180909T234415_IFCB107', 'D20180910T000638_IFCB107', 'D20180910T002902_IFCB107', 'D20180910T012005_IFCB107', 'D20180910T014229_IFCB107', 'D20180910T020452_IFCB107', 'D20180910T022716_IFCB107', 'D20180910T024940_IFCB107', 'D20180910T031203_IFCB107', 'D20180910T033427_IFCB107', 'D20180910T035650_IFCB107', 'D20180910T041914_IFCB107', 'D20180910T044138_IFCB107', 'D20180910T050401_IFCB107', 'D20180910T052625_IFCB107', 'D20180910T054849_IFCB107', 'D20180910T061112_IFCB107', 'D20180910T063336_IFCB107', 'D20180910T065559_IFCB107', 'D20180910T071823_IFCB107', 'D20180910T074046_IFCB107', 'D20180910T080310_IFCB107', 'D20180910T082533_IFCB107', 'D20180910T084757_IFCB107', 'D20180910T091020_IFCB107', 'D20180910T093244_IFCB107', 'D20180910T095507_IFCB107', 'D20180910T101731_IFCB107', 'D20180910T103954_IFCB107', 'D20180910T110218_IFCB107', 'D20180910T112441_IFCB107', 'D20180910T114705_IFCB107', 'D20180910T120928_IFCB107', 'D20180910T123152_IFCB107', 'D20180910T125415_IFCB107', 'D20180910T131639_IFCB107', 'D20180910T133902_IFCB107', 'D20180910T140126_IFCB107', 'D20180910T142350_IFCB107', 'D20180910T144613_IFCB107', 'D20180910T150837_IFCB107', 'D20180910T153101_IFCB107', 'D20180910T155324_IFCB107', 'D20180910T161548_IFCB107', 'D20180910T163811_IFCB107', 'D20180910T170035_IFCB107', 'D20180910T172258_IFCB107', 'D20180910T174522_IFCB107', 'D20180910T180745_IFCB107', 'D20180910T183009_IFCB107', 'D20180910T185233_IFCB107', 'D20180910T191456_IFCB107', 'D20180910T193720_IFCB107', 'D20180910T202823_IFCB107', 'D20180910T205046_IFCB107', 'D20180910T211310_IFCB107', 'D20180910T213534_IFCB107', 'D20180910T215757_IFCB107', 'D20180910T222021_IFCB107', 'D20180910T224245_IFCB107', 'D20180910T230508_IFCB107', 'D20180910T232732_IFCB107', 'D20180910T234955_IFCB107', 'D20180911T001219_IFCB107', 'D20180911T003443_IFCB107', 'D20180911T005706_IFCB107', 'D20180911T011930_IFCB107', 'D20180911T014154_IFCB107', 'D20180911T020417_IFCB107', 'D20180911T022641_IFCB107', 'D20180911T024904_IFCB107', 'D20180911T031128_IFCB107', 'D20180911T033351_IFCB107', 'D20180911T035615_IFCB107', 'D20180911T041839_IFCB107', 'D20180911T044103_IFCB107', 'D20180911T050327_IFCB107', 'D20180911T052551_IFCB107', 'D20180911T054814_IFCB107', 'D20180911T061038_IFCB107', 'D20180911T063302_IFCB107', 'D20180911T065525_IFCB107', 'D20180911T071749_IFCB107', 'D20180911T074013_IFCB107', 'D20180911T080236_IFCB107', 'D20180911T082500_IFCB107', 'D20180911T084723_IFCB107', 'D20180911T090947_IFCB107', 'D20180911T093211_IFCB107', 'D20180911T095434_IFCB107', 'D20180911T101658_IFCB107', 'D20180911T103921_IFCB107', 'D20180911T110145_IFCB107', 'D20180911T112409_IFCB107', 'D20180911T114632_IFCB107', 'D20180911T120856_IFCB107', 'D20180911T123120_IFCB107', 'D20180911T125343_IFCB107', 'D20180911T131607_IFCB107', 'D20180911T133831_IFCB107', 'D20180911T140054_IFCB107', 'D20180911T142318_IFCB107', 'D20180911T144542_IFCB107', 'D20180911T153645_IFCB107', 'D20180911T155909_IFCB107', 'D20180911T162133_IFCB107', 'D20180911T164357_IFCB107', 'D20180911T170620_IFCB107', 'D20180911T172844_IFCB107', 'D20180911T175108_IFCB107', 'D20180911T181331_IFCB107', 'D20180911T183555_IFCB107', 'D20180911T185818_IFCB107', 'D20180911T192042_IFCB107', 'D20180911T194306_IFCB107', 'D20180911T200531_IFCB107', 'D20180911T202750_IFCB107', 'D20180911T205015_IFCB107', 'D20180911T211241_IFCB107', 'D20180911T213501_IFCB107', 'D20180911T215722_IFCB107']
# matlab_engine = matlab.engine.start_matlab()
# matlab_engine.parpool()
ifcb = BinExtractor(path_to_bin, output_path, path_to_env_csv, path_to_ecotaxa_dir, path_to_taxonomic_grouping_csv,
                    matlab_parallel_flag=True)#, matlab_engine=matlab_engine)
ifcb.run_science(update_classification=True)
# ifcb.run_ecology(bin_list_to_reprocess, update_classification=True)

# Run BinExtractor to build scientific dataset of NAAMES BEADS
path_to_bin = '/Users/nils/Data/NAAMES/IFCB/Calibration/beads'
path_to_env_csv = '/Users/nils/Data/NAAMES/IFCB/Calibration/NAAMES_BEADS_metadata.csv'
path_to_taxonomic_grouping_csv = '/Users/nils/Data/NAAMES/IFCB/Calibration/beads_taxonomic_grouping.csv'
path_to_ecotaxa_dir = '/Users/nils/Data/NAAMES/IFCB/EcoTaxaExports/IFCB_NAAMES_Beads/ecotaxa_export_782_20191122_1923.tsv'
output_path = '/Users/nils/Data/NAAMES/IFCB/Calibration/BEADS_SCI_20191122'
# matlab_engine = matlab.engine.start_matlab()
# matlab_engine.parpool()
ifcb = BinExtractor(path_to_bin, output_path, path_to_env_csv, path_to_ecotaxa_dir, path_to_taxonomic_grouping_csv,
                    matlab_parallel_flag=True)#, matlab_engine=matlab_engine)
ifcb.run_science()

# Run BinExtractor to build scientific dataset of BEADS April 2019
path_to_bin = '/Users/nils/Data/IFCB_SizeCalibration/raw'
path_to_env_csv = '/Users/nils/Data/IFCB_SizeCalibration/BEADS201904_metadata.csv'
path_to_taxonomic_grouping_csv = '/Users/nils/Data/IFCB_SizeCalibration/beads_taxonomic_grouping.csv'
path_to_ecotaxa_dir = '/Users/nils/Data/IFCB_SizeCalibration/ecotaxa/export/ecotaxa_export_2563_20191125_1920.tsv'
output_path = '/Users/nils/Data/IFCB_SizeCalibration/BEADS201904_SCI_20191125'
# matlab_engine = matlab.engine.start_matlab()
# matlab_engine.parpool()
ifcb = BinExtractor(path_to_bin, output_path, path_to_env_csv, path_to_ecotaxa_dir, path_to_taxonomic_grouping_csv,
                    matlab_parallel_flag=True)  # , matlab_engine=matlab_engine)
ifcb.run_science()

# ./extractIFCBdata.py ecology -r /Users/nils/Data/IFCB_SizeCalibration/raw -m /Users/nils/Data/IFCB_SizeCalibration/BEADS201904_metadata.csv -t /Users/nils/Data/IFCB_SizeCalibration/beads_taxonomic_grouping.csv -e /Users/nils/Data/IFCB_SizeCalibration/ecotaxa/export/ecotaxa_export_2563_20191125_1920.tsv -o test -p

# Run BinExtractor for ML to classify dataset
input_path = '/Users/nils/Data/EXPORTS/IFCB107/raw/'
output_path = '/Users/nils/Data/MachineLearning/EXPORTS_ml/'
env_csv = '/Users/nils/Data/MachineLearning/KaggleDataset/EXPORTSEnvironmentalData_20190916.csv'
# error: only one image in bin D20180907T150827_IFCB107
input_path = '/Users/nils/Data/PEACETIME/IFCB_107/raw/'
output_path = '/Users/nils/Data/MachineLearning/PEACETIME_ml/'
env_csv = '/Users/nils/Data/MachineLearning/KaggleDataset/PEACETIMEEnvironmentalData_20190916.csv'
input_path = '/Users/nils/Data/MachineLearning/NAAMES_raw/'
output_path = '/Users/nils/Data/MachineLearning/NAAMES_ml/'
env_csv = '/Users/nils/Data/MachineLearning/KaggleDataset/NAAMESEnvironmentalData_20190828.csv'
# Start Matlab engine and parallel pool
matlab_engine = matlab.engine.start_matlab()
matlab_engine.parpool()
ifcb = BinExtractor(input_path, output_path, env_csv, matlab_engine=matlab_engine, matlab_parallel_flag=True)
ifcb.run_machine_learning()
ifcb.check_machine_learning()
# check_ml_classify_batch: Missing 8 bins from raw folder:
# D20170514T115029_IFCB107
# D20170519T041154_IFCB107
# D20170521T092311_IFCB107
# D20170530T184341_IFCB107
# D20170602T191959_IFCB107
# D20170602T192641_IFCB107
# D20170608T095453_IFCB107
# D20170608T100037_IFCB107
